#!/usr/bin/env python3
"""
Coqui TTS Professional Test Suite for BeautyAI Framework.
Comprehensive testing of Arabic TTS quality with Whisper transcription validation.
"""

import sys
import time
import os
from pathlib import Path
from typing import Dict, List, Any

# Add the beautyai_inference package to the path
sys.path.insert(0, '/home/lumi/beautyai')

from beautyai_inference.services.text_to_speech_service import TextToSpeechService
from beautyai_inference.services.audio_transcription_service import AudioTranscriptionService

def get_test_cases() -> List[Dict[str, Any]]:
    """Get comprehensive test cases for different clinic scenarios."""
    return [
        # Greeting & Welcome (Short)
        {
            "category": "greeting",
            "length": "short",
            "text": "ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã ÿ®ŸÉŸÖ ŸÅŸä ÿπŸäÿßÿØÿ© ÿßŸÑÿ¨ŸÖÿßŸÑ",
            "description": "Basic greeting message"
        },
        {
            "category": "greeting", 
            "length": "medium",
            "text": "ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉŸÖ ŸÅŸä ÿπŸäÿßÿØÿ© ÿßŸÑÿ¨ŸÖÿßŸÑ ÿßŸÑŸÖÿ™ÿ∑Ÿàÿ±ÿ©ÿå ŸÜÿ≠ŸÜ ŸáŸÜÿß ŸÑÿÆÿØŸÖÿ™ŸÉŸÖ",
            "description": "Extended welcome message"
        },
        
        # Clinic Services Description (Medium)
        {
            "category": "clinic_services",
            "length": "medium", 
            "text": "ŸÜŸÇÿØŸÖ ÿ£ÿ≠ÿØÿ´ ÿπŸÑÿßÿ¨ÿßÿ™ ÿßŸÑÿ®ÿ¥ÿ±ÿ© ŸàÿßŸÑŸàÿ¨Ÿá ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ©",
            "description": "General services overview"
        },
        {
            "category": "clinic_services",
            "length": "long",
            "text": "ÿπŸäÿßÿØÿ™ŸÜÿß ŸÖÿ™ÿÆÿµÿµÿ© ŸÅŸä ÿπŸÑÿßÿ¨ÿßÿ™ ÿßŸÑÿ¨ŸÖÿßŸÑ ÿßŸÑŸÖÿ™ÿ∑Ÿàÿ±ÿ© ÿ®ŸÖÿß ŸÅŸä ÿ∞ŸÑŸÉ ÿ™ÿ¨ÿØŸäÿØ ÿßŸÑÿ®ÿ¥ÿ±ÿ© ŸàÿπŸÑÿßÿ¨ ÿßŸÑÿ™ÿ¨ÿßÿπŸäÿØ ŸàÿßŸÑŸÑŸäÿ≤ÿ± ÿßŸÑÿ∑ÿ®Ÿä ÿßŸÑŸÖÿπÿ™ŸÖÿØ ÿπÿßŸÑŸÖŸäÿßŸã ŸÑÿ∂ŸÖÿßŸÜ ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ŸÑŸÑŸÖÿ±ÿ∂Ÿâ",
            "description": "Comprehensive clinic description"
        },
        
        # Botox Treatment Information (Medium/Long)
        {
            "category": "botox_treatment",
            "length": "medium",
            "text": "ÿßŸÑÿ®Ÿàÿ™ŸàŸÉÿ≥ ÿπŸÑÿßÿ¨ ÿ¢ŸÖŸÜ ŸàŸÅÿπÿßŸÑ ŸÑÿ™ŸÇŸÑŸäŸÑ ÿßŸÑÿ™ÿ¨ÿßÿπŸäÿØ ŸàÿßŸÑÿÆÿ∑Ÿàÿ∑ ÿßŸÑÿØŸÇŸäŸÇÿ©",
            "description": "Basic botox information"
        },
        {
            "category": "botox_treatment", 
            "length": "long",
            "text": "ÿπŸÑÿßÿ¨ ÿßŸÑÿ®Ÿàÿ™ŸàŸÉÿ≥ ŸáŸà ÿ•ÿ¨ÿ±ÿßÿ° ÿ™ÿ¨ŸÖŸäŸÑŸä ÿ∫Ÿäÿ± ÿ¨ÿ±ÿßÿ≠Ÿä Ÿäÿ≥ÿ™ÿÆÿØŸÖ ŸÑÿ™ŸÇŸÑŸäŸÑ ÿ∏ŸáŸàÿ± ÿßŸÑÿ™ÿ¨ÿßÿπŸäÿØ ŸàÿßŸÑÿÆÿ∑Ÿàÿ∑ ÿßŸÑÿ™ÿπÿ®Ÿäÿ±Ÿäÿ© ŸÅŸä ÿßŸÑŸàÿ¨Ÿáÿå ÿ≠Ÿäÿ´ Ÿäÿ™ŸÖ ÿ≠ŸÇŸÜ ŸÖÿßÿØÿ© ÿßŸÑÿ®Ÿàÿ™ŸàŸÑŸäŸÜŸàŸÖ ŸÅŸä ÿßŸÑÿπÿ∂ŸÑÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ŸáÿØŸÅÿ© ŸÑŸÖŸÜÿπ ÿßŸÜŸÇÿ®ÿßÿ∂Ÿáÿß Ÿàÿ®ÿßŸÑÿ™ÿßŸÑŸä ÿ™ŸÇŸÑŸäŸÑ ÿßŸÑÿ™ÿ¨ÿßÿπŸäÿØ",
            "description": "Detailed botox procedure explanation"
        },
        
        # Appointment Scheduling (Short/Medium)
        {
            "category": "appointment",
            "length": "short",
            "text": "ŸäŸÖŸÉŸÜŸÉŸÖ ÿ≠ÿ¨ÿ≤ ŸÖŸàÿπÿØ ÿπÿ®ÿ± ÿßŸÑŸáÿßÿ™ŸÅ ÿ£Ÿà ÿßŸÑŸÖŸàŸÇÿπ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä",
            "description": "Simple appointment booking info"
        },
        {
            "category": "appointment",
            "length": "medium", 
            "text": "ŸÑÿ≠ÿ¨ÿ≤ ŸÖŸàÿπÿØŸÉŸÖÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÜÿß ÿπŸÑŸâ ÿßŸÑÿ±ŸÇŸÖ ÿßŸÑŸÖÿπÿ∑Ÿâ ÿ£Ÿà ÿ≤Ÿäÿßÿ±ÿ© ŸÖŸàŸÇÿπŸÜÿß ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿå ŸàŸÜÿ≠ŸÜ ŸÖÿ™ÿßÿ≠ŸàŸÜ ŸÖŸÜ ÿßŸÑÿ£ÿ≠ÿØ ÿ•ŸÑŸâ ÿßŸÑÿÆŸÖŸäÿ≥",
            "description": "Detailed appointment scheduling"
        },
        
        # Consultation Information (Medium/Long)
        {
            "category": "consultation",
            "length": "medium",
            "text": "ŸÜŸÇÿØŸÖ ÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ© ŸÖÿ¨ÿßŸÜŸäÿ© ŸÖÿπ ÿ∑ÿ®Ÿäÿ® ŸÖÿ™ÿÆÿµÿµ ŸÑÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿπŸÑÿßÿ¨ ÿßŸÑŸÖŸÜÿßÿ≥ÿ® ŸÑŸÉŸÖ",
            "description": "Free consultation offer"
        },
        {
            "category": "consultation",
            "length": "long", 
            "text": "ÿÆŸÑÿßŸÑ ÿßŸÑÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ© ÿßŸÑÿ£ŸàŸÑŸäÿ©ÿå ÿ≥ŸäŸÇŸàŸÖ ÿ∑ÿ®Ÿäÿ®ŸÜÿß ÿßŸÑŸÖÿ™ÿÆÿµÿµ ÿ®ŸÅÿ≠ÿµ ÿ®ÿ¥ÿ±ÿ™ŸÉŸÖ Ÿàÿ™ŸÇŸäŸäŸÖ ÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ŸÉŸÖ ÿßŸÑÿÆÿßÿµÿ©ÿå ŸàŸÖŸÜ ÿ´ŸÖ ÿ≥ŸäŸÇÿ™ÿ±ÿ≠ ÿπŸÑŸäŸÉŸÖ ÿÆÿ∑ÿ© ÿπŸÑÿßÿ¨ ŸÖÿÆÿµÿµÿ© ÿ™ŸÜÿßÿ≥ÿ® ŸÜŸàÿπ ÿ®ÿ¥ÿ±ÿ™ŸÉŸÖ Ÿàÿ£ŸáÿØÿßŸÅŸÉŸÖ ÿßŸÑÿ™ÿ¨ŸÖŸäŸÑŸäÿ© ŸÖÿπ ÿ¥ÿ±ÿ≠ ŸÖŸÅÿµŸÑ ŸÑŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ŸàÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÖÿ™ŸàŸÇÿπÿ©",
            "description": "Comprehensive consultation process"
        },
        
        # Technical/Medical Terms (Complex)
        {
            "category": "technical",
            "length": "long",
            "text": "ŸÜÿ≥ÿ™ÿÆÿØŸÖ ÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ© ŸàÿßŸÑŸÑŸäÿ≤ÿ± ÿßŸÑÿ∑ÿ®Ÿä ÿßŸÑŸÖÿπÿ™ŸÖÿØ ŸÖŸÜ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ∫ÿ∞ÿßÿ° ŸàÿßŸÑÿØŸàÿßÿ° ÿßŸÑÿ£ŸÖÿ±ŸäŸÉŸäÿ© ŸÑÿ∂ŸÖÿßŸÜ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÖÿ´ŸÑŸâ ŸàÿßŸÑÿ≥ŸÑÿßŸÖÿ© ÿßŸÑŸÇÿµŸàŸâ ŸÑŸÑŸÖÿ±ÿ∂Ÿâ",
            "description": "Technical medical terminology"
        }
    ]
def test_coqui_tts_professional():
    """Professional Coqui TTS test suite with comprehensive Arabic scenarios."""
    print("üéôÔ∏è Coqui TTS Professional Test Suite")
    print("=" * 60)
    
    # Setup output directory
    output_dir = Path("/home/lumi/beautyai/voice_tests/coqui_tts_test")
    output_dir.mkdir(parents=True, exist_ok=True)
    print(f"üìÅ Output directory: {output_dir}")
    
    # Get test cases
    test_cases = get_test_cases()
    
    try:
        # Initialize services
        print("\nüì• Initializing Coqui TTS service...")
        tts_service = TextToSpeechService()
        if not tts_service.load_tts_model("coqui-tts-arabic", "coqui"):
            print("‚ùå Failed to load Coqui TTS model")
            return None
        
        print("üì• Initializing Whisper transcription service...")
        transcription_service = AudioTranscriptionService()
        if not transcription_service.load_whisper_model("whisper-large-v3-turbo-arabic"):
            print("‚ùå Failed to load Whisper model")
            return None
        
        # Test results storage
        results = []
        
        # Process each test case
        for i, test_case in enumerate(test_cases, 1):
            category = test_case["category"]
            length = test_case["length"]
            text = test_case["text"]
            description = test_case["description"]
            
            print(f"\nüß™ Test {i}/{len(test_cases)}: {category.title()} ({length})")
            print(f"üìù Description: {description}")
            print(f"üìú Text: '{text[:60]}{'...' if len(text) > 60 else ''}'")
            
            # Generate meaningful filename
            filename = f"{category}_{length}_{i:02d}.wav"
            output_path = output_dir / filename
            
            # Generate Arabic speech with Coqui TTS
            print(f"üé§ Generating speech...")
            result_path = tts_service.text_to_speech(
                text=text,
                language="ar",
                speaker_voice="female",
                output_path=str(output_path)
            )
            
            if result_path and os.path.exists(result_path):
                print(f"‚úÖ Audio generated: {filename}")
                
                # Transcribe with Whisper
                print(f"üß† Transcribing...")
                transcription = transcription_service.transcribe_audio_file(result_path)
                
                if transcription:
                    # Calculate accuracy metrics
                    original_words = set(text.split())
                    transcribed_words = set(transcription.split())
                    common_words = original_words.intersection(transcribed_words)
                    word_accuracy = len(common_words) / len(original_words) if original_words else 0
                    
                    # Character accuracy
                    common_chars = set(text) & set(transcription)
                    char_accuracy = len(common_chars) / max(len(set(text)), 1)
                    
                    # Length comparison
                    length_ratio = len(transcription) / len(text) if text else 0
                    
                    # Determine quality
                    if word_accuracy >= 0.7 and char_accuracy >= 0.8:
                        quality = "Excellent"
                        status = "‚úÖ"
                    elif word_accuracy >= 0.5 and char_accuracy >= 0.7:
                        quality = "Good"
                        status = "‚úÖ"
                    elif word_accuracy >= 0.3 and char_accuracy >= 0.6:
                        quality = "Acceptable"
                        status = "‚ö†Ô∏è"
                    else:
                        quality = "Poor"
                        status = "‚ùå"
                    
                    print(f"{status} Quality: {quality} (Word: {word_accuracy:.1%}, Char: {char_accuracy:.1%})")
                    
                    # Store results
                    results.append({
                        "test_id": i,
                        "category": category,
                        "length": length,
                        "description": description,
                        "filename": filename,
                        "original_text": text,
                        "transcription": transcription,
                        "word_accuracy": word_accuracy,
                        "char_accuracy": char_accuracy,
                        "length_ratio": length_ratio,
                        "quality": quality,
                        "status": status
                    })
                    
                else:
                    print("‚ùå Transcription failed")
                    results.append({
                        "test_id": i,
                        "category": category,
                        "length": length,
                        "description": description,
                        "filename": filename,
                        "original_text": text,
                        "transcription": None,
                        "quality": "Failed",
                        "status": "‚ùå"
                    })
            else:
                print("‚ùå Speech generation failed")
                results.append({
                    "test_id": i,
                    "category": category,
                    "length": length,
                    "description": description,
                    "filename": "N/A",
                    "original_text": text,
                    "transcription": None,
                    "quality": "Failed",
                    "status": "‚ùå"
                })
        
        return results
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return None

def print_results_report(results: List[Dict[str, Any]]) -> None:
    """Print comprehensive results in markdown format."""
    if not results:
        print("‚ùå No results to display")
        return
    
    # Calculate overall statistics
    total_tests = len(results)
    successful_tests = [r for r in results if r.get("word_accuracy", 0) is not None and r.get("word_accuracy", 0) > 0.3]
    
    if successful_tests:
        avg_word_acc = sum(r.get("word_accuracy", 0) for r in successful_tests) / len(successful_tests)
        avg_char_acc = sum(r.get("char_accuracy", 0) for r in successful_tests) / len(successful_tests)
    else:
        avg_word_acc = avg_char_acc = 0
    
    # Count by category and quality
    categories = {}
    quality_counts = {"Excellent": 0, "Good": 0, "Acceptable": 0, "Poor": 0, "Failed": 0}
    
    for result in results:
        cat = result.get("category", "unknown")
        quality = result.get("quality", "Failed")
        
        if cat not in categories:
            categories[cat] = {"total": 0, "passed": 0}
        categories[cat]["total"] += 1
        
        if quality in ["Excellent", "Good", "Acceptable"]:
            categories[cat]["passed"] += 1
        
        quality_counts[quality] += 1
    
    # Print markdown report
    print("\n" + "="*80)
    print("üìä COQUI TTS PROFESSIONAL TEST RESULTS")
    print("="*80)
    print()
    
    print("```markdown")
    print("# Coqui TTS Arabic Testing Report")
    print()
    print("## üìà Overall Performance")
    print(f"- **Total Tests:** {total_tests}")
    print(f"- **Successful Tests:** {len(successful_tests)}/{total_tests} ({len(successful_tests)/total_tests*100:.1f}%)")
    print(f"- **Average Word Accuracy:** {avg_word_acc:.1%}")
    print(f"- **Average Character Accuracy:** {avg_char_acc:.1%}")
    print()
    
    print("## üéØ Quality Distribution")
    for quality, count in quality_counts.items():
        percentage = count/total_tests*100 if total_tests > 0 else 0
        emoji = {"Excellent": "üü¢", "Good": "üîµ", "Acceptable": "üü°", "Poor": "üü†", "Failed": "üî¥"}.get(quality, "‚ö™")
        print(f"- {emoji} **{quality}:** {count} tests ({percentage:.1f}%)")
    print()
    
    print("## üìã Category Performance")
    for category, stats in categories.items():
        success_rate = stats["passed"]/stats["total"]*100 if stats["total"] > 0 else 0
        emoji = "‚úÖ" if success_rate >= 70 else "‚ö†Ô∏è" if success_rate >= 50 else "‚ùå"
        print(f"- {emoji} **{category.replace('_', ' ').title()}:** {stats['passed']}/{stats['total']} ({success_rate:.1f}%)")
    print()
    
    print("## üìù Detailed Test Results")
    print()
    print("| Test | Category | Length | Quality | Word Acc | Char Acc | File |")
    print("|------|----------|--------|---------|----------|----------|------|")
    
    for result in results:
        test_id = result.get("test_id", "N/A")
        category = result.get("category", "unknown").replace("_", " ").title()
        length = result.get("length", "N/A").title()
        quality = result.get("quality", "Failed")
        word_acc = result.get("word_accuracy", 0)
        char_acc = result.get("char_accuracy", 0)
        filename = result.get("filename", "N/A")
        
        word_acc_str = f"{word_acc:.1%}" if word_acc is not None else "N/A"
        char_acc_str = f"{char_acc:.1%}" if char_acc is not None else "N/A"
        
        print(f"| {test_id:02d} | {category} | {length} | {quality} | {word_acc_str} | {char_acc_str} | {filename} |")
    
    print()
    print("## üîç Sample Transcriptions")
    print()
    
    # Show a few sample transcriptions
    for i, result in enumerate(results[:3]):
        if result.get("transcription"):
            print(f"### Test {result.get('test_id', i+1)}: {result.get('category', 'unknown').replace('_', ' ').title()}")
            print(f"**Original:** {result.get('original_text', 'N/A')}")
            print(f"**Transcribed:** {result.get('transcription', 'N/A')}")
            print(f"**Quality:** {result.get('quality', 'N/A')} (Word: {result.get('word_accuracy', 0):.1%}, Char: {result.get('char_accuracy', 0):.1%})")
            print()
    
    print("## üéØ Recommendations")
    if avg_word_acc >= 0.7:
        print("- ‚úÖ **Excellent Performance:** Coqui TTS is production-ready for Arabic")
        print("- üöÄ **Next Steps:** Deploy to production environment")
    elif avg_word_acc >= 0.5:
        print("- ‚úÖ **Good Performance:** Coqui TTS shows strong Arabic capabilities") 
        print("- üîß **Optimization:** Consider fine-tuning for specific categories with lower scores")
    elif avg_word_acc >= 0.3:
        print("- ‚ö†Ô∏è **Acceptable Performance:** Some improvement needed")
        print("- üîß **Actions:** Review model settings and consider alternative models")
    else:
        print("- ‚ùå **Poor Performance:** Significant improvements required")
        print("- üõ†Ô∏è **Actions:** Debug model configuration and test alternative approaches")
    
    print("```")
    print()

def main():
    """Main function to run the professional Coqui TTS test suite."""
    try:
        print("üöÄ Starting Coqui TTS Professional Test Suite")
        
        results = test_coqui_tts_professional()
        
        if results:
            print_results_report(results)
            print("\n‚úÖ Coqui TTS testing completed successfully!")
            print("üéØ Check the detailed report above for comprehensive analysis")
            return True
        else:
            print("\n‚ùå Coqui TTS testing failed")
            print("üîß Check model configuration and try again")
            return False
            
    except Exception as e:
        print(f"‚ùå Main execution failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
